const pool = require('../lib/database/database');

const storageReporte = {}

storageReporte.getAll = async () => {
    return new Promise((resolve, reject) => {
        pool.query(`SELECT REP.FECHA, SUM(REP.TOTALCOBRO) TOTALCOBRO, SUM(REP.TOTALGANANCIA) TOTALGANANCIA, SUM(REP.COMISION_ESTILISTAS) COMISION_ESTILISTAS,
        SUM(REP.GANANCIA_REAL) GANANCIA_REAL
         FROM (
        SELECT CAST(V.FECHAVENTA AS DATE) FECHA, V.IDESTILISTA, PE.PRIMERNOMBRE PRIMERNOMBRE_E, 
        PE.PRIMERAPELLIDO PRIMERAELLIDO_E,
        
        S.PRECIO_S+BS.TOTAL+IFNULL(BP.TOTALP,0) TOTALCOBRO, (S.PRECIO_S + BS.GANANCIA + IFNULL(BP.GANANCIA,0)) TOTALGANANCIA, 
        (S.PRECIO_S + BS.GANANCIA + IFNULL(BP.GANANCIA,0)) * 0.40 COMISION_ESTILISTAS,
        (S.PRECIO_S + BS.GANANCIA + IFNULL(BP.GANANCIA,0)) * 0.60 GANANCIA_REAL,
        
        V.ESTADO 
        FROM VENTA V 
        INNER JOIN PERSONA PE ON V.IDESTILISTA = PE.IDPERSONA 
        INNER JOIN SERVICIO S ON V.IDSERVICIO = S.IDSERVICIO
        LEFT JOIN DET_SERV_PROD DSP ON S.IDSERVICIO = DSP.IDSERVICIO
        LEFT JOIN PRODUCTO P ON DSP.IDPRODUCTO = P.IDPRODUCTO
        
        LEFT JOIN (
        SELECT DSP.IDSERVICIO, SUM((P.PRECIO_V/P.CANTIDAD_U)*DSP.CANTIDAD) TOTAL, SUM(((P.PRECIO_V-P.PRECIO_C)/P.CANTIDAD_U)*DSP.CANTIDAD) GANANCIA FROM DET_SERV_PROD DSP
        LEFT JOIN SERVICIO S ON DSP.IDSERVICIO = S.IDSERVICIO
        LEFT JOIN PRODUCTO P ON DSP.IDPRODUCTO = P.IDPRODUCTO
        GROUP BY DSP.IDSERVICIO
        ) BS ON V.IDSERVICIO = BS.IDSERVICIO
        
        LEFT JOIN (
        SELECT DVP.IDVENTA, SUM((P.PRECIO_V/P.CANTIDAD_U)*DVP.CANTIDAD) TOTALP, SUM(((P.PRECIO_V-P.PRECIO_C)/P.CANTIDAD_U)*DVP.CANTIDAD) GANANCIA FROM DET_VENT_PROD DVP
        LEFT JOIN PRODUCTO P ON DVP.IDPRODUCTO = P.IDPRODUCTO
        GROUP BY DVP.IDVENTA
        ) BP ON V.IDVENTA = BP.IDVENTA
        
        WHERE V.ESTADO = 'AC' AND CAST(FECHAVENTA AS DATE) BETWEEN '2022-09-16' AND '2022-09-19' 
        
        GROUP BY V.IDVENTA
        ) REP
        
        GROUP BY REP.FECHA
        ;`, (err, results, fields) => {
            if (err) reject(err);

            resolve(results)
        })
    })
}

storageReporte.getOnly = async (ID) => {
    
    return new Promise((resolve, reject) => {
        pool.query(`SELECT REP.FECHA, SUM(REP.TOTALCOBRO) TOTALCOBRO, SUM(REP.TOTALGANANCIA) TOTALGANANCIA, SUM(REP.COMISION_ESTILISTAS) COMISION_ESTILISTAS,
        SUM(REP.GANANCIA_REAL) GANANCIA_REAL
         FROM (
        SELECT CAST(V.FECHAVENTA AS DATE) FECHA, V.IDESTILISTA, PE.PRIMERNOMBRE PRIMERNOMBRE_E, 
        PE.PRIMERAPELLIDO PRIMERAELLIDO_E,
        
        S.PRECIO_S+BS.TOTAL+IFNULL(BP.TOTALP,0) TOTALCOBRO, (S.PRECIO_S + BS.GANANCIA + IFNULL(BP.GANANCIA,0)) TOTALGANANCIA, 
        (S.PRECIO_S + BS.GANANCIA + IFNULL(BP.GANANCIA,0)) * 0.40 COMISION_ESTILISTAS,
        (S.PRECIO_S + BS.GANANCIA + IFNULL(BP.GANANCIA,0)) * 0.60 GANANCIA_REAL,
        
        V.ESTADO 
        FROM VENTA V 
        INNER JOIN PERSONA PE ON V.IDESTILISTA = PE.IDPERSONA 
        INNER JOIN SERVICIO S ON V.IDSERVICIO = S.IDSERVICIO
        LEFT JOIN DET_SERV_PROD DSP ON S.IDSERVICIO = DSP.IDSERVICIO
        LEFT JOIN PRODUCTO P ON DSP.IDPRODUCTO = P.IDPRODUCTO
        
        LEFT JOIN (
        SELECT DSP.IDSERVICIO, SUM((P.PRECIO_V/P.CANTIDAD_U)*DSP.CANTIDAD) TOTAL, SUM(((P.PRECIO_V-P.PRECIO_C)/P.CANTIDAD_U)*DSP.CANTIDAD) GANANCIA FROM DET_SERV_PROD DSP
        LEFT JOIN SERVICIO S ON DSP.IDSERVICIO = S.IDSERVICIO
        LEFT JOIN PRODUCTO P ON DSP.IDPRODUCTO = P.IDPRODUCTO
        GROUP BY DSP.IDSERVICIO
        ) BS ON V.IDSERVICIO = BS.IDSERVICIO
        
        LEFT JOIN (
        SELECT DVP.IDVENTA, SUM((P.PRECIO_V/P.CANTIDAD_U)*DVP.CANTIDAD) TOTALP, SUM(((P.PRECIO_V-P.PRECIO_C)/P.CANTIDAD_U)*DVP.CANTIDAD) GANANCIA FROM DET_VENT_PROD DVP
        LEFT JOIN PRODUCTO P ON DVP.IDPRODUCTO = P.IDPRODUCTO
        GROUP BY DVP.IDVENTA
        ) BP ON V.IDVENTA = BP.IDVENTA
        
        WHERE V.ESTADO = 'AC' AND CAST(FECHAVENTA AS DATE) BETWEEN '2022-09-16' AND '2022-09-19' 
        AND V.IDESTILISTA = ?
        GROUP BY V.IDVENTA
        ) REP
        
        GROUP BY REP.FECHA
        ;`, [ID], (err, results, fields) => {
            if (err) reject(err);
            
            if(results.length == 0){
                reject(404)
            }
            
            resolve(results)
        })
    })
}

module.exports = storageReporte;